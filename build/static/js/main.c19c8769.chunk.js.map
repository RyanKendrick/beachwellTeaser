{"version":3,"sources":["app02.png","app03.png","App.js","serviceWorker.js","index.js","app01.png"],"names":["module","exports","__webpack_require__","p","lastScrollY","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nav","React","createRef","handleScroll","event","window","scrollY","state","mockup1Fade","setState","mockup2Fade","mockup3Fade","fadeBlock","fadeBlock2","addEventListener","removeEventListener","_this2","react_default","a","createElement","className","Fade_default","duration","appear","when","src","mockup1","alt","mockup2","mockup3","delay","onReveal","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c19c8769.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/app02.38bb4498.png\";","module.exports = __webpack_public_path__ + \"static/media/app03.05937e56.png\";","import React, {Component} from 'react';\nimport mockup1 from './app01.png'\nimport mockup2 from './app02.png'\nimport mockup3 from './app03.png'\nimport Fade from 'react-reveal/Fade';\nimport './App.css';\n\nlet lastScrollY = 0;\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mockup1Fade : true,\n      mockup2Fade : false,\n      mockup3Fade : false,\n    }\n  }\n\n  nav = React.createRef();\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  };\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  };\n\n  handleScroll = (event) => {\n    lastScrollY = window.scrollY;\n\n    if(lastScrollY >= 440 && this.state.mockup1Fade ) {\n      this.setState({\n        mockup1Fade: false,\n        mockup2Fade: true,\n        mockup3Fade: false,\n      })\n    }\n\n    if(lastScrollY <= 440 && !this.state.mockup1Fade) {\n      this.setState({\n        mockup1Fade: true,\n        mockup2Fade: false,\n        mockup3Fade: false,\n      })\n    }\n  };\n\n  fadeBlock = () => {\n    this.setState({\n      mockup1Fade: false,\n      mockup2Fade: true,\n      mockup3Fade: false,\n    })\n  }\n\n  fadeBlock2 = () => {\n    this.setState({\n      mockup1Fade: false,\n      mockup2Fade: false,\n      mockup3Fade: true,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='entire-page'>\n          <Fade  duration={3000} appear={true}>\n\n          <div className='splash-left'>\n            {/* <img src={beachImage} alt='' className='splash-image'/> */}\n            <div className='mg-left'>\n              <div className='header-copy'>\n                Beachwell\n              </div>\n              <div className='subheader-copy'>\n                Toronto's beaches are only open for 92 days. Get the most of them.\n                Launching June 1st.\n              </div>\n            </div>\n          </div>\n        </Fade>\n          <div className=\"splash-right\">\n            <Fade when={this.state.mockup1Fade}>\n                <img src={mockup1} alt='' className='iphone-mockup'></img>\n            </Fade>\n            <Fade when={this.state.mockup2Fade}>\n                <img src={mockup2} alt='' className='iphone-mockup'></img>\n            </Fade>\n            <Fade when={this.state.mockup3Fade}>\n                <img src={mockup3} alt='' className='iphone-mockup'></img>\n            </Fade>\n          </div>\n        <div className='block-2'>\n          <Fade duration={2000} delay={500} onReveal={ () => this.fadeBlock('1')}>\n            <div className='header-text-block-2'>\n              <div className='mg-left'>\n                <div className='header-copy long-text-block'>\n                  On July 27th, the city said Cherry Beach the latest e.Coli reading was 34.\n                  It was actually 143.\n                </div>\n                <div className='subheader-copy'>\n                  Toronto's beaches are only open for 92 days. Get the most of them.\n                  Launching June 1st.\n                </div>\n              </div>\n            </div>\n        </Fade>\n        </div>\n        <div className='block-2 red'>\n          <Fade duration={2000} delay={500} onReveal={ () => this.fadeBlock2()}>\n\n            <div className='splash-left'>\n              {/* <img src={beachImage} alt='' className='splash-image'/> */}\n              <div className='mg-left'>\n                <div className='header-copy'>\n                  Beachwell\n                </div>\n                <div className='subheader-copy'>\n                  Toronto's beaches are only open for 92 days. Get the most of them.\n                  Launching June 1st.\n                </div>\n              </div>\n            </div>\n        </Fade>\n        </div>\n        </div>\n      <div className='footer'>\n        Beachwell\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/app01.06533c4b.png\";"],"sourceRoot":""}